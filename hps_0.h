#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x0
#define ONCHIP_MEMORY2_0_SPAN 65536
#define ONCHIP_MEMORY2_0_END 0xffff
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_DUAL_PORT 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE soc_system_onchip_memory2_0
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_INSTANCE_ID NONE
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_MEMORY2_0_SINGLE_CLOCK_OP 0
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 65536
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_DATA_WIDTH 64
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_memory2_0

/*
 * Macros for device 'pio_output', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT_COMPONENT_NAME pio_output
#define PIO_OUTPUT_BASE 0x0
#define PIO_OUTPUT_SPAN 32
#define PIO_OUTPUT_END 0x1f
#define PIO_OUTPUT_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT_BIT_MODIFYING_OUTPUT_REGISTER 1
#define PIO_OUTPUT_CAPTURE 0
#define PIO_OUTPUT_DATA_WIDTH 17
#define PIO_OUTPUT_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT_EDGE_TYPE NONE
#define PIO_OUTPUT_FREQ 50000000
#define PIO_OUTPUT_HAS_IN 0
#define PIO_OUTPUT_HAS_OUT 1
#define PIO_OUTPUT_HAS_TRI 0
#define PIO_OUTPUT_IRQ_TYPE NONE
#define PIO_OUTPUT_RESET_VALUE 131071

/*
 * Macros for device 'pio_hex_z', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_HEX_Z_'.
 * The prefix is the slave descriptor.
 */
#define PIO_HEX_Z_COMPONENT_TYPE altera_avalon_pio
#define PIO_HEX_Z_COMPONENT_NAME pio_hex_z
#define PIO_HEX_Z_BASE 0x20
#define PIO_HEX_Z_SPAN 16
#define PIO_HEX_Z_END 0x2f
#define PIO_HEX_Z_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_HEX_Z_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_HEX_Z_CAPTURE 0
#define PIO_HEX_Z_DATA_WIDTH 8
#define PIO_HEX_Z_DO_TEST_BENCH_WIRING 0
#define PIO_HEX_Z_DRIVEN_SIM_VALUE 0
#define PIO_HEX_Z_EDGE_TYPE NONE
#define PIO_HEX_Z_FREQ 50000000
#define PIO_HEX_Z_HAS_IN 0
#define PIO_HEX_Z_HAS_OUT 1
#define PIO_HEX_Z_HAS_TRI 0
#define PIO_HEX_Z_IRQ_TYPE NONE
#define PIO_HEX_Z_RESET_VALUE 127

/*
 * Macros for device 'pio_hex_y', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_HEX_Y_'.
 * The prefix is the slave descriptor.
 */
#define PIO_HEX_Y_COMPONENT_TYPE altera_avalon_pio
#define PIO_HEX_Y_COMPONENT_NAME pio_hex_y
#define PIO_HEX_Y_BASE 0x30
#define PIO_HEX_Y_SPAN 16
#define PIO_HEX_Y_END 0x3f
#define PIO_HEX_Y_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_HEX_Y_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_HEX_Y_CAPTURE 0
#define PIO_HEX_Y_DATA_WIDTH 8
#define PIO_HEX_Y_DO_TEST_BENCH_WIRING 0
#define PIO_HEX_Y_DRIVEN_SIM_VALUE 0
#define PIO_HEX_Y_EDGE_TYPE NONE
#define PIO_HEX_Y_FREQ 50000000
#define PIO_HEX_Y_HAS_IN 0
#define PIO_HEX_Y_HAS_OUT 1
#define PIO_HEX_Y_HAS_TRI 0
#define PIO_HEX_Y_IRQ_TYPE NONE
#define PIO_HEX_Y_RESET_VALUE 127

/*
 * Macros for device 'pio_hex_x', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_HEX_X_'.
 * The prefix is the slave descriptor.
 */
#define PIO_HEX_X_COMPONENT_TYPE altera_avalon_pio
#define PIO_HEX_X_COMPONENT_NAME pio_hex_x
#define PIO_HEX_X_BASE 0x40
#define PIO_HEX_X_SPAN 16
#define PIO_HEX_X_END 0x4f
#define PIO_HEX_X_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_HEX_X_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_HEX_X_CAPTURE 0
#define PIO_HEX_X_DATA_WIDTH 8
#define PIO_HEX_X_DO_TEST_BENCH_WIRING 0
#define PIO_HEX_X_DRIVEN_SIM_VALUE 0
#define PIO_HEX_X_EDGE_TYPE NONE
#define PIO_HEX_X_FREQ 50000000
#define PIO_HEX_X_HAS_IN 0
#define PIO_HEX_X_HAS_OUT 1
#define PIO_HEX_X_HAS_TRI 0
#define PIO_HEX_X_IRQ_TYPE NONE
#define PIO_HEX_X_RESET_VALUE 127

/*
 * Macros for device 'pio_input', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT_COMPONENT_NAME pio_input
#define PIO_INPUT_BASE 0x50
#define PIO_INPUT_SPAN 16
#define PIO_INPUT_END 0x5f
#define PIO_INPUT_BIT_CLEARING_EDGE_REGISTER 1
#define PIO_INPUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT_CAPTURE 1
#define PIO_INPUT_DATA_WIDTH 17
#define PIO_INPUT_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT_DRIVEN_SIM_VALUE 0
#define PIO_INPUT_EDGE_TYPE RISING
#define PIO_INPUT_FREQ 50000000
#define PIO_INPUT_HAS_IN 1
#define PIO_INPUT_HAS_OUT 0
#define PIO_INPUT_HAS_TRI 0
#define PIO_INPUT_IRQ_TYPE NONE
#define PIO_INPUT_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1619298306

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x20007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_H_ */
